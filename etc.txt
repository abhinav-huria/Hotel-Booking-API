router.put("/:id", async (req, res) => {
  try {
    const updatedHotel = await Hotel.findByIdAndUpdate(
      req.params.id,
      { $set: req.body },
      { new: true }
    );
    res.status(200).json(updatedHotel);
  } catch (error) {
    res.status(500).json(error);
  }
});

router.delete("/:id", async (req, res) => {
    try {   
        const deletedHotel = await Hotel.findByIdAndDelete(req.params.id);
        res.status(200).json(deletedHotel);
    } catch (error) {
        res.status(500).json(error);
    }
});

router.get("/all", async (req, res) => {
    try {
        const hotels = await Hotel.find();
        res.status(200).json(hotels);
    } catch (error) {
        res.status(500).json(error);
    }
});

router.get("/:id", async (req, res) => {
    try {
        const hotel = await Hotel.findById(req.params.id);
        res.status(200).json(hotel);
    } catch (error) {
        res.status(500).json(error);
    }
});


//usersch


const CustomerSchema = new Schema({
    username: {
        type: String,
        min: [4, 'Too short'],
        max: [32, 'Too long']
    },
    email: {
        type: String,
        min: [4, 'Too short, min is 4 characters'],
        max: [32, 'Too long, max is 32 characters'],
        unique: true,
        lowercase: true,
        required: 'Email is required',
        match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/]
    },
    password: {
        type: String,
        min: [4, 'Too short, min is 4 characters'],
        max: [32, 'Too long, max is 32 characters'],
        required: 'Password is required'
    },
    phone: {    
        type: Number,
        min: [10, 'Too short, min is 10 characters'],
        max: [10, 'Too long, max is 10 characters'],
        required: 'Phone is required'
    },
    bookings: [{type: Schema.Types.ObjectId, ref: 'Booking'}]

});

userSchema.methods.hasSamePassword = function(requestedPassword){
    return bcrypt.compareSync(requestedPassword, this.password);
}



userSchema.pre('save', function(next){
    const user = this;
    
    bcrypt.genSalt(10, function (err, salt) {
        bcrypt.hash(user.password, salt, function (err, hash) {
            user.password = hash;
            next();
        });
    });
})


//
room model

reviews: [
        {
            user: {
                type: mongoose.Types.ObjectId,
                ref: 'User',
                required: true
            },
            name: {
                type: String,
                required: true,
            },
            rating: {
                type: Number,
                required: true
            },
            comment: {
                type: String,
                required: true
            }
        }
    ],

    user: {
        type: mongoose.Types.ObjectId,
        ref: 'User',
        required: true
    },


//hotel model

import mongoose from "mongoose";
import { checkLength } from "../controllers/validation.js";

const HotelSchema = new mongoose.Schema({
  hotelName: {
    type: String,
    required: true,
    unique: true,
  },
  hotelCity: {
    type: String,
    required: true,
  },
  hotelAddress: {
    type: String,
    required: true,
  },
  hotelPhoneNumber: {
    type: String,
    required: true,
    unique: true,
    validate: checkLength(10),
  },
  hotelEmail: {
    type: String,
    required: true,
    unique: true,
  },
  photos: {
    type: [String],
    required: false,
  },
  hotelDescription: {
    type: String,
    required: true,
  },
  hotelAmenities: {
    type: [String],
    required: false,
  },
  hotelRooms: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Room",
    },
  ],
  hotelReviews: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Review",
    },
  ],
});

export default mongoose.model("Hotel", HotelSchema);


//nav

import { Link } from "react-router-dom";
import React from "react";
import { Navbar, Nav, NavDropdown, Form, FormControl, Button } from "react-bootstrap";
import { useHistory } from "react-router-dom";

const NavbarComponent = () => {
    const auth = useSelector(state => state.auth);
    const dispatch = useDispatch();
    const history = useHistory();
    
    const logoutHandler = () => {
        dispatch(logout());
        history.push("/login");
    };
    
    return (
        <Navbar bg="light" expand="lg">
        <Navbar.Brand href="/">
            <img
            src="https://www.freepnglogos.com/uploads/logo-png/logo-png-transparent-background-4.png"
            alt="logo"
            height="30"
            width="30"
            />
        </Navbar.Brand>
        <Navbar.Toggle aria-controls="basic-navbar-nav" />
        <Navbar.Collapse id="basic-navbar-nav">
            <Nav className="mr-auto">
            <Nav.Link href="/">Home</Nav.Link>
            <Nav.Link href="/about">About</Nav.Link>
            <Nav.Link href="/contact">Contact</Nav.Link>
            <Nav.Link href="/posts">Posts</Nav.Link>
            <Nav.Link href="/dashboard">Dashboard</Nav.Link>
            </Nav>
            <Form inline>
            <FormControl type="text" placeholder="Search" className="mr-sm-2" />
            <Button variant="outline-success">Search</Button>
            </Form>
            <Nav>
            {auth.isAuthenticated ? (
                <>
                <Nav.Link href="/profile">Profile</Nav.Link>
                <Nav.Link onClick={logoutHandler}>Logout</Nav.Link>
                </>
            ) : (
                <>
                <Nav.Link href="/login">Login</Nav.Link>
                <Nav.Link href="/register">Register</Nav.Link>
                </>
            )}
            </Nav>
        </Navbar.Collapse>
        </Navbar>
    );
    };

    export default NavbarComponent;
